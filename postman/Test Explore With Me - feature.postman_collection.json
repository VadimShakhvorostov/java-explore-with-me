{
	"info": {
		"_postman_id": "789b983b-424d-4dec-bdbd-b4f392f2a911",
		"name": "Test Explore With Me - feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36147508"
	},
	"item": [
		{
			"name": "request for test 1",
			"item": [
				{
					"name": "add category id 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"category1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/categories",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user id 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"user1\",\r\n\"email\": \"user1@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "add event id 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"annotation annotation Событие 1\",\r\n  \"category\": 1,\r\n  \"description\": \"description description Событие 1\",\r\n  \"eventDate\": \"2025-10-10 16:50:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Событие 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/1/events",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "publish event id 1",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "add event id  2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"annotation annotation Событие 2\",\r\n  \"category\": 1,\r\n  \"description\": \"description description Событие 2\",\r\n  \"eventDate\": \"2025-10-10 16:50:05\",\r\n  \"location\": {\r\n    \"lat\": 55.754167,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Событие 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/1/events",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user id 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"user2\",\r\n\"email\": \"user2@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user id 3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"user3\",\r\n\"email\": \"user3@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user id 4",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"user4\",\r\n\"email\": \"user4@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user id 5",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"user5\",\r\n\"email\": \"user5@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test 1",
			"item": [
				{
					"name": "add like",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"const url = pm.request.url;\r",
									"const userId = url.path[1]; \r",
									"const eventId = url.path[3]; \r",
									"const voteType = url.query.find(param => param.key === 'voteType')?.value;\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, user, event, voteType, createdAt\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('voteType');\r",
									"    pm.expect(target).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    if (userId !== undefined && eventId !== undefined && voteType !== undefined) {\r",
									"        pm.expect(parseInt(userId)).to.equal(target.user, 'id user');\r",
									"        pm.expect(parseInt(eventId)).to.equal(target.event, 'id event');\r",
									"        pm.expect(voteType).to.equal(target.voteType, 'type');\r",
									"    } else {\r",
									"        pm.expect.fail(\"Не удалось найти один или несколько параметров в запросе.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/2/vote/1?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"2",
								"vote",
								"1"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get events (должен стоять 1 лайк)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"const eventIdFromPath = pm.request.url.path[1]; \r",
									"\r",
									"pm.test(\"id события должен соответствовать значению в пути\", function () {\r",
									"    pm.expect(responseData.id).to.equal(parseInt(eventIdFromPath), 'проверка id события');\r",
									"});\r",
									"\r",
									"pm.test(\"likeCount должен равняться 1\", function () {\r",
									"    pm.expect(responseData.likeCount).to.equal(1, 'проверка likeCount');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get events (рейтинг должен ровняться 1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"const eventIdFromPath = pm.request.url.path[1]; \r",
									"\r",
									"pm.test(\"id события должен соответствовать значению в пути\", function () {\r",
									"    pm.expect(responseData.id).to.equal(parseInt(eventIdFromPath), 'проверка id события');\r",
									"});\r",
									"\r",
									"pm.test(\"rating должен равняться 1\", function () {\r",
									"    pm.expect(responseData.rating).to.equal(1, 'проверка rating');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "add dislike",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"const url = pm.request.url;\r",
									"const userId = url.path[1]; \r",
									"const eventId = url.path[3]; \r",
									"const voteType = url.query.find(param => param.key === 'voteType')?.value;\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, user, event, voteType, createdAt\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('voteType');\r",
									"    pm.expect(target).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    if (userId !== undefined && eventId !== undefined && voteType !== undefined) {\r",
									"        pm.expect(parseInt(userId)).to.equal(target.user, 'id user');\r",
									"        pm.expect(parseInt(eventId)).to.equal(target.event, 'id event');\r",
									"        pm.expect(voteType).to.equal(target.voteType, 'type');\r",
									"    } else {\r",
									"        pm.expect.fail(\"Не удалось найти один или несколько параметров в запросе.\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/2/vote/1?voteType=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"2",
								"vote",
								"1"
							],
							"query": [
								{
									"key": "voteType",
									"value": "DISLIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get events (должен стоять 1 дизлайк)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"const eventIdFromPath = pm.request.url.path[1]; \r",
									"\r",
									"pm.test(\"id события должен соответствовать значению в пути\", function () {\r",
									"    pm.expect(responseData.id).to.equal(parseInt(eventIdFromPath), 'проверка id события');\r",
									"});\r",
									"\r",
									"pm.test(\"dislikeCount должен равняться 1\", function () {\r",
									"    pm.expect(responseData.dislikeCount).to.equal(1, 'проверка dislikeCount');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get events (рейтинг должен ровняться 0)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"const eventIdFromPath = pm.request.url.path[1]; \r",
									"\r",
									"pm.test(\"id события должен соответствовать значению в пути\", function () {\r",
									"    pm.expect(responseData.id).to.equal(parseInt(eventIdFromPath), 'проверка id события');\r",
									"});\r",
									"\r",
									"pm.test(\"rating должен равняться 1\", function () {\r",
									"    pm.expect(responseData.rating).to.equal(0, 'проверка rating');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "add like event not published",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/2/vote/2?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"2",
								"vote",
								"2"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "request for test 2",
			"item": [
				{
					"name": "publish event id 2",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "add dislike user-1 event-2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/5/vote/2?voteType=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"5",
								"vote",
								"2"
							],
							"query": [
								{
									"key": "voteType",
									"value": "DISLIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add like user-2 event-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/2/vote/1?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"2",
								"vote",
								"1"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add like user-3 event-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"const url = pm.request.url;\r",
									"const userId = url.path[1]; \r",
									"const eventId = url.path[3]; \r",
									"const voteType = url.query.find(param => param.key === 'voteType')?.value;\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, user, event, voteType, createdAt\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('voteType');\r",
									"    pm.expect(target).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    if (userId !== undefined && eventId !== undefined && voteType !== undefined) {\r",
									"        pm.expect(parseInt(userId)).to.equal(target.user, 'id user');\r",
									"        pm.expect(parseInt(eventId)).to.equal(target.event, 'id event');\r",
									"        pm.expect(voteType).to.equal(target.voteType, 'type');\r",
									"    } else {\r",
									"        pm.expect.fail(\"Не удалось найти один или несколько параметров в запросе.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/3/vote/1?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"3",
								"vote",
								"1"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add like user-4 event-2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"const url = pm.request.url;\r",
									"const userId = url.path[1]; \r",
									"const eventId = url.path[3]; \r",
									"const voteType = url.query.find(param => param.key === 'voteType')?.value;\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, user, event, voteType, createdAt\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('user');\r",
									"    pm.expect(target).to.have.property('event');\r",
									"    pm.expect(target).to.have.property('voteType');\r",
									"    pm.expect(target).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    if (userId !== undefined && eventId !== undefined && voteType !== undefined) {\r",
									"        pm.expect(parseInt(userId)).to.equal(target.user, 'id user');\r",
									"        pm.expect(parseInt(eventId)).to.equal(target.event, 'id event');\r",
									"        pm.expect(voteType).to.equal(target.voteType, 'type');\r",
									"    } else {\r",
									"        pm.expect.fail(\"Не удалось найти один или несколько параметров в запросе.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/4/vote/2?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"4",
								"vote",
								"2"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test 2",
			"item": [
				{
					"name": "get users like event(получить пользователей который поставили дизлайк событию)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"В списке должна быть 1 запись\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1, 'проверка количества записей');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"id  записи должен быть 5\", function () {\r",
									"    pm.expect(responseData[0].id).to.equal(5, 'проверка id первой записи');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/1/vote/2?voteType=DISLIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"1",
								"vote",
								"2"
							],
							"query": [
								{
									"key": "voteType",
									"value": "DISLIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get users like event(получить пользователей который поставили лайк событию)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"В списке должна быть 1 запись\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1, 'проверка количества записей');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"id  записи должен быть 5\", function () {\r",
									"    pm.expect(responseData[0].id).to.equal(4, 'проверка id первой записи');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/1/vote/2?voteType=LIKE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"1",
								"vote",
								"2"
							],
							"query": [
								{
									"key": "voteType",
									"value": "LIKE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event sort rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"В списке должно быть 2 записи\", function () {\r",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(2, 'проверка количества записей');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"id должны быть 1 и 2\", function () {\r",
									"    pm.expect(responseData[0].id).to.equal(1, 'проверка id первой записи');\r",
									"    pm.expect(responseData[1].id).to.equal(2, 'проверка id первой записи');\r",
									"});\r",
									"\r",
									"pm.test(\"Сортировка должна быть от наибольшего рейтинга к наименьшему\", function () {\r",
									"    pm.expect(responseData[0].rating).to.equal(1.0, 'рейтинг 1 записи');\r",
									"    pm.expect(responseData[1].rating).to.equal(0.5, 'рейтинг 2 записи');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events?sort=RATING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "text",
									"value": "0",
									"disabled": true
								},
								{
									"key": "categories",
									"value": "0",
									"disabled": true
								},
								{
									"key": "paid",
									"value": "true",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38",
									"disabled": true
								},
								{
									"key": "onlyAvailable",
									"value": "false",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "RATING"
								},
								{
									"key": "from",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}